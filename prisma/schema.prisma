generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Enquiry {
  id              String       @id @default(cuid()) // Unique identifier for each enquiry
  name            String // User's name
  whatsappNumber  String // User's WhatsApp number
  email           String        // User's email, must be unique
  courseId        Int // Preferred course (foreign key)
  slotId          Int // Preferred slot (foreign key)
  createdAt       DateTime     @default(now()) // Timestamp for when the enquiry was submitted
  paymentVerified Boolean      @default(false) // Track if payment is verified
  transaction     Transaction[] @relation // Relation to Transaction, one-to-many

  course Course @relation(fields: [courseId], references: [id])
  slot   Slot   @relation(fields: [slotId], references: [id])

  @@index([email]) // Index on email for faster queries
  @@index([courseId, slotId]) // Index on courseId and slotId for faster queries
}

model Course {
  id        Int       @id @default(autoincrement()) // Unique identifier for courses
  name      String // Course name  
  slots     Slot[] // One-to-many relationship with Slot
  enquiries Enquiry[] // One-to-many relationship with Enquiry
}

model Slot {
  id        Int       @id @default(autoincrement()) // Unique identifier for slots
  slotName  String // Slot name
  courseId  Int // Foreign key to the Course model
  course    Course    @relation(fields: [courseId], references: [id])
  enquiries Enquiry[] // One-to-many relationship with Enquiry
}

model Transaction {
  id            String   @id @default(cuid()) // Unique identifier for the transaction
  enquiryId     String   // Foreign key to the Enquiry model (no `@unique` here)
  amount        Float // Payment amount
  status        String // Payment status (e.g., 'completed', 'failed', 'pending')
  transactionId String // Unique transaction ID from the payment gateway
  createdAt     DateTime @default(now()) // Timestamp for when the transaction was created
  updatedAt     DateTime @updatedAt // Timestamp for when the transaction was last updated

  // This side defines the relation with "fields" and "references"
  enquiry Enquiry @relation(fields: [enquiryId], references: [id])
}
