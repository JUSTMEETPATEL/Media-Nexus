// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id        Int       @id @default(autoincrement()) // Unique identifier for each course
  name      String    @unique // Name of the course (e.g., "SHORT FILM MAKING")
  slots     Slot[] // Relation to Slot model
  enquiries Enquiry[] // Relation to Enquiry model
}

model Slot {
  id        Int       @id @default(autoincrement()) // Unique identifier for each slot
  courseId  Int // Foreign key to the Course model
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  slotName  String // Name of the slot (e.g., "Morning", "Evening")
  capacity  Int       @default(30) // Total capacity of the slot
  remaining Int       @default(30) // Remaining available seats in the slot
  enquiries Enquiry[] // Relation to Enquiry model

  @@unique([courseId, slotName]) // Ensures a course has unique slots
}

model Enquiry {
  id             Int      @id @default(autoincrement()) // Unique identifier for each enquiry
  name           String // Name of the person enquiring
  whatsappNumber String // WhatsApp number
  email          String // Email address
  courseId       Int // Foreign key to the Course model
  slotId         Int // Foreign key to the Slot model
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  slot           Slot     @relation(fields: [slotId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now()) // Timestamp of the enquiry
}
