generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Enquiry {
  id              String        @id @default(cuid()) // Unique identifier for each enquiry
  name            String // User's name
  whatsappNumber  String // User's WhatsApp number
  email           String // User's email, must be unique
  courseId        Int // Preferred course (foreign key)
  slotId          Int // Preferred slot (foreign key)
  createdAt       DateTime      @default(now()) // Timestamp for when the enquiry was submitted
  paymentVerified Boolean       @default(false) // Track if payment is verified
  transaction     Transaction[] @relation // Relation to Transaction, one-to-many

  course Course @relation(fields: [courseId], references: [id])
  slot   Slot   @relation(fields: [slotId], references: [id])

  // Index on email for faster queries
  // Index on courseId and slotId for faster queries
  @@index([email])
  @@index([courseId, slotId])
}

// Add this to your existing schema.prisma file

model Assignment {
  id          String   @id @default(cuid())
  courseId    Int // Using Int to match your Course model's ID type
  slotId      Int // Using Int to match your Slot model's ID type
  title       String
  description String?  @db.Text
  deadline    DateTime
  assignedBy  String // Simple string field instead of relation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course Course @relation(fields: [courseId], references: [id])
  slot   Slot   @relation(fields: [slotId], references: [id])

  @@index([courseId, slotId])
}

// Add these relation fields to your existing models
model Course {
  id          Int          @id @default(autoincrement())
  name        String
  slots       Slot[]
  enquiries   Enquiry[]
  assignments Assignment[] // Add this line
}

model Slot {
  id          Int          @id @default(autoincrement())
  slotName    String
  courseId    Int
  course      Course       @relation(fields: [courseId], references: [id])
  enquiries   Enquiry[]
  assignments Assignment[] // Add this line
}

model Transaction {
  id            String   @id @default(cuid()) // Unique identifier for the transaction
  enquiryId     String? // Foreign key to the Enquiry model (nullable to allow SetNull behavior)
  amount        Float // Payment amount
  status        String // Payment status (e.g., 'completed', 'failed', 'pending')
  transactionId String // Unique transaction ID from the payment gateway
  createdAt     DateTime @default(now()) // Timestamp for when the transaction was created
  updatedAt     DateTime @updatedAt // Timestamp for when the transaction was last updated   
  userMail      String // User's email

  enquiry Enquiry? @relation(fields: [enquiryId], references: [id], onDelete: SetNull)
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String    @default("user")
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
